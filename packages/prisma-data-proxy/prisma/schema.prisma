generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("PLANET_SCALE_DB_URL")
  relationMode = "prisma"
}

model SlackStandUp {
  id                             String                           @id @default(uuid()) @map("id")
  createdAt                      DateTime                         @default(now()) @map("created_at")
  updatedAt                      DateTime                         @updatedAt @map("updated_at")
  name                           String                           @map("name")
  slackChannelId                 String                           @map("slack_channel_id")
  time                           DateTime                         @map("time") @db.Time(0)
  frequency                      Frequency                        @map("frequency")
  timezone                       String                           @map("timezone")
  slackTeamId                    String                           @map("slack_team_id")
  slackUserId                    String                           @map("slack_user_id")
  participants                   SlackStandUpParticipant[]
  questions                      SlackStandUpQuestion[]
  responses                      SlackStandUpResponse[]
  slackActiveStandUpConversation SlackActiveStandUpConversation[]
  atlassianApiToken              AtlassianApiToken[]

  @@index([slackTeamId], name: "slack_stand_ups_slack_team_id")
  @@index([slackUserId], name: "slack_stand_ups_slack_user_id")
  @@map("slack_stand_ups")
}

model SlackStandUpParticipant {
  id             String       @id @default(uuid()) @map("id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  slackUserId    String       @map("slack_user_id")
  slackStandUpId String       @map("slack_stand_up_id")
  slackStandUp   SlackStandUp @relation(fields: [slackStandUpId], references: [id], onDelete: Cascade)

  @@unique([slackUserId, slackStandUpId])
  @@index([slackStandUpId], name: "slack_stand_up_participants_slack_stand_up_id")
  @@map("slack_stand_up_participants")
}

model SlackStandUpQuestion {
  id             String       @id @default(uuid()) @map("id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  question       String       @map("question")
  slackStandUpId String       @map("slack_stand_up_id")
  slackStandUp   SlackStandUp @relation(fields: [slackStandUpId], references: [id], onDelete: Cascade)

  @@index([slackStandUpId], name: "slack_stand_up_questions_slack_stand_up_id")
  @@map("slack_stand_up_questions")
}

model SlackStandUpResponse {
  id             String               @id @default(uuid()) @map("id")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  date           DateTime             @map("date") @db.Date
  slackUserId    String               @map("slack_user_id")
  slackStandUpId String               @map("slack_stand_up_id")
  skipped        Boolean?             @map("skipped")
  onLeave        Boolean?             @map("on_leave")
  slackStandUp   SlackStandUp         @relation(fields: [slackStandUpId], references: [id], onDelete: Cascade)
  updates        SlackStandUpUpdate[]

  @@unique([slackUserId, slackStandUpId, date])
  @@index([slackStandUpId], name: "slack_stand_up_responses_slack_stand_up_id")
  @@map("slack_stand_up_responses")
}

model SlackStandUpUpdate {
  id                     String               @id @default(uuid()) @map("id")
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  question               String               @map("question") @db.Text
  update                 String               @map("update") @db.Text
  slackStandUpResponseId String               @map("slack_stand_up_response_id")
  slackStandUpResponse   SlackStandUpResponse @relation(fields: [slackStandUpResponseId], references: [id], onDelete: Cascade)

  @@index([slackStandUpResponseId], name: "slack_stand_up_updates_slack_stand_up_response_id")
  @@map("slack_stand_up_updates")
}

enum Frequency {
  MONDAY_TO_FRIDAY
  MONDAY_TO_SATURDAY
  EVERYDAY
}

// A active stand up conversation is a conversation between a user and the bot.
// A user can have only one active stand up conversation at a time.
// This is used as a cache to store the active stand up conversation.
// As Worker KV is eventually consistent, and it might take some time for the
// active stand up conversation to be updated in the KV, we use this table to
// store the active stand up conversation.
model SlackActiveStandUpConversation {
  id               String       @id @default(uuid()) @map("id")
  createdAt        DateTime     @default(now()) @map("created_at")
  slackUserId      String       @map("slack_user_id")
  conversationDOId String       @map("conversation_do_id")
  slackStandUpId   String       @map("slack_stand_up_id")
  slackStandUp     SlackStandUp @relation(fields: [slackStandUpId], references: [id], onDelete: Cascade)

  @@unique([slackUserId])
  @@index([slackUserId], name: "slack_active_stand_up_conversations_slack_user_id")
  @@index([slackStandUpId], name: "slack_active_stand_up_conversations_slack_stand_up_id")
  @@map("slack_active_stand_up_conversations")
}

model AtlassianApiToken {
  id             String       @id @default(uuid()) @map("id")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  slackUserId    String       @map("slack_user_id")
  slackStandUpId String       @map("slack_stand_up_id")
  slackStandUp   SlackStandUp @relation(fields: [slackStandUpId], references: [id], onDelete: Cascade)
  projectId      String       @map("project_id")
  email          String       @map("email")
  token          String       @map("token") @db.Text

  @@unique([slackUserId, slackStandUpId])
  @@index([slackUserId, slackStandUpId], name: "atlassian_api_tokens_slack_user_id_slack_stand_up_id")
  @@index([slackStandUpId], name: "atlassian_api_tokens_slack_stand_up_id")
  @@map("atlassian_api_tokens")
}
